import connectDB from "../../lib/db";
import Order from "../../models/Order";
import { schema } from "../../utils/validation";
import dotenv from "dotenv";
import crypto from "crypto";
import transporter from "../../lib/mailer";

dotenv.config();

const MAX_RECORDS = 30;
const SECRET_KEY = process.env.ENCRYPTION_KEY;

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω" });
  }

  function encrypt(text) {
    const key = Buffer.from(SECRET_KEY, "hex");
    const iv = crypto.randomBytes(16);
    const cipher = crypto.createCipheriv("aes-256-cbc", key, iv);
    let encrypted = cipher.update(text, "utf8", "hex");
    encrypted += cipher.final("hex");
    return iv.toString("hex") + ":" + encrypted;
  }

  try {
    await connectDB();
    let data = schema.parse(req.body);

    console.log("üìå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π:", data);

    const capitalize = (str) =>
      str ? str.charAt(0).toUpperCase() + str.slice(1).toLowerCase() : str;

    data.region = capitalize(data.region);
    data.insurancePeriod = capitalize(data.insurancePeriod);

    if (data.drivers && Array.isArray(data.drivers)) {
      data.drivers = data.drivers.map((driver) => ({
        ...driver,
        firstName: capitalize(driver.firstName),
        lastName: capitalize(driver.lastName),
        middleName: driver.middleName ? capitalize(driver.middleName) : "",
        licenseSeries: driver.licenseSeries.toUpperCase(),
        licenseNumber: driver.licenseNumber.toUpperCase(),
      }));
    }

    if (data.car) {
      data.car.brand = capitalize(data.car.brand);
      data.car.model = capitalize(data.car.model);
      data.car.vin = data.car.vin.toUpperCase();
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –¥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    sendEmailNotification(data).catch(console.error);

    // –®–∏—Ñ—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
    if (data.phone) data.phone = encrypt(String(data.phone).trim());
    if (data.car) data.car.vin = encrypt(data.car.vin);
    if (data.drivers) {
      data.drivers = data.drivers.map((driver) => ({
        ...driver,
        firstName: encrypt(driver.firstName),
        lastName: encrypt(driver.lastName),
        middleName: driver.middleName ? encrypt(driver.middleName) : "",
      }));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    const count = await Order.countDocuments();
    if (count >= MAX_RECORDS) {
      const oldestOrder = await Order.findOneAndDelete().sort({ createdAt: 1 });
      if (oldestOrder) {
        console.log("üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å:", oldestOrder._id);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    const order = new Order(data);
    await order.save();

    res.status(201).json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" });
    console.log("‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
    res.status(400).json({ message: error.message });
  }
}

async function sendEmailNotification(data) {
  try {
    console.log("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ email...");
    const info = await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: process.env.EMAIL_RECEIVER,
      subject: "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –ø–æ–ª–∏—Å",
      text: `–†–µ–≥–∏–æ–Ω: ${data.region}
      –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
      –°—Ç—Ä–∞—Ö–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥: ${data.insurancePeriod}
      –í–æ–¥–∏—Ç–µ–ª–∏: ${data.drivers
        .map(
          (d) =>
            `\n- ${d.lastName} ${d.firstName} ${d.middleName || ""}, –í–£: ${
              d.licenseSeries
            } ${d.licenseNumber}, –û–ø—ã—Ç —Å ${
              d.drivingExperienceDate
            }, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${
              d.birthDate
                ? new Date(d.birthDate).toLocaleDateString("ru-RU")
                : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            }`
        )
        .join("")}
      –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ: 
      –ú–∞—Ä–∫–∞: ${data.car?.brand || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}, 
      –ú–æ–¥–µ–ª—å: ${data.car?.model || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}, 
      –ì–æ–¥: ${data.car?.year || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}, 
      VIN: ${data.car?.vin || "–ù–µ —É–∫–∞–∑–∞–Ω"}
      
      –ó–∞–∫–∞–∑ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ: ${process.env.URL}/admin`,
    });

    console.log("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", info.response);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:", error);
  }
}
