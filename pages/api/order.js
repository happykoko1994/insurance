import connectDB from "../../lib/db";
import Order from "../../models/Order";
import { schema } from "../../utils/validation";
import nodemailer from "nodemailer";
import dotenv from "dotenv";

dotenv.config();

const MAX_RECORDS = 30; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ
const COOLDOWN_TIME = 60 * 1000;

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω" });
  }

  try {
    await connectDB();
    let data = schema.parse(req.body);

    console.log("üìå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π:", data);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è)
    const capitalize = (str) =>
      str ? str.charAt(0).toUpperCase() + str.slice(1).toLowerCase() : str;

    // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    data.region = capitalize(data.region);
    data.insurancePeriod = capitalize(data.insurancePeriod);

    if (data.drivers && Array.isArray(data.drivers)) {
      data.drivers = data.drivers.map((driver) => ({
        ...driver,
        firstName: capitalize(driver.firstName),
        lastName: capitalize(driver.lastName),
        middleName: driver.middleName ? capitalize(driver.middleName) : "",
        licenseSeries: driver.licenseSeries.toUpperCase(),
        licenseNumber: driver.licenseNumber.toUpperCase(),
      }));
    }

    if (data.car) {
      data.car.brand = capitalize(data.car.brand);
      data.car.model = capitalize(data.car.model);
      data.car.vin = data.car.vin.toUpperCase();
    }

    console.log("üìå –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", data);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    const count = await Order.countDocuments();
    if (count >= MAX_RECORDS) {
      const oldestOrder = await Order.findOne().sort({ createdAt: 1 });
      if (oldestOrder) {
        await Order.deleteOne({ _id: oldestOrder._id });
        console.log("üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å:", oldestOrder._id);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –æ—Ç —ç—Ç–æ–≥–æ email
    const lastOrder = await Order.findOne({ email: req.body.email }).sort({
      createdAt: -1,
    });
    if (
      lastOrder &&
      Date.now() - new Date(lastOrder.createdAt).getTime() < COOLDOWN_TIME
    ) {
      return res
        .status(429)
        .json({ message: "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π!" });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    const order = new Order(data);
    await order.save();

    res.status(201).json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" });
    console.log("‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    console.log("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞—á–∞–ª–∞—Å—å...");
    sendEmailNotification(data).catch(console.error);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
    res.status(400).json({ message: error.message });
  }
}

// üì© –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
async function sendEmailNotification(data) {
  try {
    console.log("üì© –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞...");

    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    console.log("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ email...");

    const info = await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: process.env.EMAIL_RECEIVER,
      subject: "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –ø–æ–ª–∏—Å",
      text: `–†–µ–≥–∏–æ–Ω: ${data.region}
–°—Ç—Ä–∞—Ö–æ–≤–æ–π –ø–µ—Ä–∏–æ–¥: ${data.insurancePeriod}
–í–æ–¥–∏—Ç–µ–ª–∏: ${data.drivers
        .map(
          (d) =>
            `\n- ${d.lastName} ${d.firstName} ${d.middleName || ""}, –í–£: ${
              d.licenseSeries
            } ${d.licenseNumber}, –û–ø—ã—Ç —Å ${
              d.drivingExperienceDate
            }, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${
              d.birthDate
                ? new Date(d.birthDate).toLocaleDateString("ru-RU")
                : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            }`
        )

        .join("")}
–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ: 
–ú–∞—Ä–∫–∞: ${data.car?.brand || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}, 
–ú–æ–¥–µ–ª—å: ${data.car?.model || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}, 
–ì–æ–¥: ${data.car?.year || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}, 
VIN: ${data.car?.vin || "–ù–µ —É–∫–∞–∑–∞–Ω"}

–ó–∞–∫–∞–∑ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ: ${process.env.URL}/admin`,
    });

    console.log("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", info.response);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:", error);
  }
}
